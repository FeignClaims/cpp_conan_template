name: "parse_environment"
description: "Parse environment"
inputs:
  os:
    required: true
    description: "Operating system"
  compiler:
    required: true
    description: "Compiler"
outputs:
  os_name:
    description: "Operating system name (ubuntu converted to linux)"
    value: ${{ steps.os.outputs.name }}
  os_version:
    description: "Operating system version (if not set in inputs.os, set to latest)"
    value: ${{ steps.os.outputs.version }}
  arch:
    description: "Architecture"
    value: ${{ steps.arch.outputs.value }}
  compiler_name:
    description: "Compiler name"
    value: ${{ steps.compiler.outputs.name }}
  compiler_version:
    description: "Compiler version (if not set in inputs.compiler, set to latest)"
    value: ${{ steps.compiler.outputs.version }}
  gcov_executable:
    description: "The corresponding gcov_executable (Available only for clang and gcc)"
    value: ${{ steps.gcov.outputs.value }}

runs:
  using: "composite"
  steps:
    - name: Parse os and os version
      id: os
      shell: bash
      env:
        VALUE: ${{ contains(inputs.os, '-') && inputs.os || format('{0}-{1}', inputs.os, 'latest') }}
      run: |
        export NAME=${VALUE%%-*}
        echo name=${NAME/ubuntu/linux} >> "$GITHUB_OUTPUT"

        export VERSION=${VALUE##*-}
        echo version=$VERSION >> "$GITHUB_OUTPUT"

    - name: Parse architecture
      id: arch
      shell: bash
      run: |
        echo value=${{ steps.os.outputs.name == 'macos' && steps.os.outputs.version >= '14' && 'armv8' || 'x86_64' }} >> "$GITHUB_OUTPUT"

    - name: Parse compiler and compiler version
      id: compiler
      shell: bash
      env:
        VALUE: ${{ contains(inputs.compiler, '-') && inputs.compiler || format('{0}-{1}', inputs.compiler, 'latest') }}
      run: |
        export NAME=${VALUE%%-*}
        echo name=$NAME >> "$GITHUB_OUTPUT"

        export VERSION=${VALUE##*-}
        echo version=$VERSION >> "$GITHUB_OUTPUT"

    - name: Parse gcov
      id: gcov
      shell: bash
      run: |
        echo "value=${{ contains(inputs.compiler, 'clang') && 'llvm-cov gcov' || contains(inputs.compiler, 'gcc') && format('{0}-{1}', 'gcov', steps.compiler.outputs.version) || '' }}" >> "$GITHUB_OUTPUT"
