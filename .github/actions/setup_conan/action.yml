name: "setup_conan"
description: "sets up conan"
inputs:
  os:
    required: true
    description: "Operating system"
  arch:
    required: true
    description: "Architecutre"
  compiler:
    required: true
    description: "Compiler"
  build_type:
    required: true
    description: "Build type"
  args:
    description: "Additional conan args"
    default: ""
  recipe_repository:
    description: "The conan recipe repository to be checked out and added as a conan remote"
    default: ""
outputs:
  home:
    description: "The conan home path"
    value: ${{ steps.output.outputs.home }}
  host_profile:
    description: "The conan host profile to be used"
    value: ${{ steps.output.outputs.host_profile }}
  build_profile:
    description: "The conan build profile to be used"
    value: ${{ steps.output.outputs.build_profile }}
  args:
    description: "The corresponding args that should be used in conan commands afterwards"
    value: ${{ steps.output.outputs.args }}
  os_name:
    description: "Operating system name (ubuntu converted to linux)"
    value: ${{ steps.parse_os.outputs.name }}
  os_version:
    description: "Operating system version (if not set in inputs.os, set to latest)"
    value: ${{ steps.parse_os.outputs.version }}
  compiler_name:
    description: "Compiler name (llvm converted to clang)"
    value: ${{ steps.parse_compiler.outputs.name }}
  compiler_version:
    description: "Compiler version (if not set in inputs.compiler, set to latest)"
    value: ${{ steps.parse_compiler.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Install conan
      shell: bash
      run: |
        pip3 install conan

    - name: Detect conan default profile (used as build profile afterwards)
      shell: bash
      run: |
        conan profile detect

    - name: Parse os and os version
      id: parse_os
      shell: bash
      env:
        VALUE: ${{ contains(matrix.os, '-') && matrix.os || format('{0}-{1}', matrix.os, 'latest') }}
      run: |
        export NAME=${VALUE%%-*}
        echo name=${NAME/ubuntu/linux} >> "$GITHUB_OUTPUT"

        export VERSION=${VALUE##*-}
        echo version=$VERSION >> "$GITHUB_OUTPUT"

    - name: Parse compiler and compiler version
      id: parse_compiler
      shell: bash
      env:
        VALUE: ${{ contains(matrix.compiler, '-') && matrix.compiler || format('{0}-{1}', matrix.compiler, 'latest') }}
      run: |
        export NAME=${VALUE%%-*}
        echo name=${NAME/llvm/clang} >> "$GITHUB_OUTPUT"

        export VERSION=${VALUE##*-}
        echo version=$VERSION >> "$GITHUB_OUTPUT"

    - name: Output
      id: output
      shell: bash
      run: |
        echo "home=$(conan config home)" >> "$GITHUB_OUTPUT"

        export HOST_PROFILE=$(python3 script/match_conan_profile.py "${{ steps.parse_os.outputs.name }}-${{ steps.parse_os.outputs.version }}-${{ inputs.arch }}-${{ steps.parse_compiler.outputs.name }}-${{ steps.parse_compiler.outputs.version }}-${{ inputs.build_type }}")
        echo "host_profile=$HOST_PROFILE" >> "$GITHUB_OUTPUT"

        export BUILD_PROFILE=default
        echo "build_profile=$BUILD_PROFILE" >> "$GITHUB_OUTPUT"

        export 
        echo "args=-pr:b '$BUILD_PROFILE' -pr:h '$HOST_PROFILE' -s:h 'build_type=${{ inputs.build_type }}' ${{ inputs.args }}" >> "$GITHUB_OUTPUT"

    - name: Install conan config folder
      shell: bash
      run: |
        conan config install ./conan

    - name: Checkout the specified recipe repository
      if: inputs.recipe_repository != ''
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.recipe_repository }}
        path: conan_recipes

    - name: Add the specified recipe repository as a remote
      if: inputs.recipe_repository != ''
      shell: bash
      run: |
        conan remote add local conan_recipes

    - name: Cleanup conan system packages (they are not properly cached)
      shell: bash
      run: |
        conan remove '*/system' -c

    - name: Install conan packages
      shell: bash
      run: |
        conan install . ${{ steps.output.outputs.args }} -b missing

    - name: Clean 30 days unused conan caches
      shell: bash
      run: |
        conan remove '*' --lru=30d
